{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "RootRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "wordpress-rds",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Stmt1433702475000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "rds:DescribeDBInstances"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "wordpress-asg",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Sid": "Stmt1433736361000",
                                    "Effect": "Allow",
                                    "Action": [
                                        "autoscaling:AttachInstances",
                                        "autoscaling:DescribeAutoScalingGroups"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "Path": "/"
            }
        },
        "RootInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "RootRole"
                    }
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "CidrBlock": "10.0.0.0/16",
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "VPC-WordPress"
                    }
                ]
            }
        },
        "SubnetZone1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": "sa-east-1a",
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.0.0/24",
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "SubnetZone2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": "sa-east-1b",
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": "10.0.1.0/24",
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "IGW-WordPress"
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteTableZone1": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "RTZone1-WordPress"
                    }
                ]
            }
        },
        "RouteTableZone2": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "RTZone2-WordPress"
                    }
                ]
            }
        },
        "RouteZone1": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTableZone1"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteZone2": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTableZone2"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "SubnetRouteTableAssociationZone1": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetZone1"
                },
                "RouteTableId": {
                    "Ref": "RouteTableZone1"
                }
            }
        },
        "SubnetRouteTableAssociationZone2": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetZone2"
                },
                "RouteTableId": {
                    "Ref": "RouteTableZone2"
                }
            }
        },
        "EC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "EC2 security group",
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "EC2SecurityGroup-WordPress"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "RDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "GroupDescription": "RDS security group",
                "Tags": [
                    {
                        "Key": "stack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "RDSSecurityGroup-WordPress"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "EC2SecurityGroup"
                        }
                    }
                ]
            }
        },
        "RDSSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "RDS Subnet Group",
                "SubnetIds": [
                    {
                        "Ref": "SubnetZone1"
                    },
                    {
                        "Ref": "SubnetZone2"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DB-Subnet-Group-WordPress"
                    }
                ]
            }
        },
        "RDSInstance": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBInstanceIdentifier": "DB-WordPress",
                "AllocatedStorage": "5",
                "DBInstanceClass": "db.t1.micro",
                "StorageType": "gp2",
                "VPCSecurityGroups": [
                    {
                        "Ref": "RDSSecurityGroup"
                    }
                ],
                "DBSubnetGroupName": {
                    "Ref": "RDSSubnetGroup"
                },
                "Engine": "MySQL",
                "EngineVersion": "5.5",
                "MasterUsername": "devops",
                "MasterUserPassword": "devops123",
                "MultiAZ": "true"
            }
        },
        "WebInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "RDSInstance",
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT15M"
                }
            },
            "Properties": {
                "AvailabilityZone": "sa-east-1a",
                "ImageId": "ami-bf9520a2",
                "InstanceType": "t2.micro",
                "KeyName": "wordpress",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "\n",
                                "# Signal aws cloud formation\n",
                                "# TODO: this is aws specific now and should be somewhere else\n",
                                "function send_signal {\n",
                                "\n",
                                "echo \"SENDING $1\"\n",
                                "cfn-signal -e $1 \\",
                                "--stack \\",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " \\",
                                "--resource \\",
                                "WebInstance",
                                " \\",
                                "--region \\",
                                "sa-east-1",
                                "\n",
                                "}\n",
                                "\n",
                                "type git || yum install -y git\n",
                                "\n",
                                "git clone https://github.com/rapha-lima/DevOps.git /opt/DevOps\n",
                                "\n",
                                "type salt-call || curl -sSL https://bootstrap.saltstack.com | sh\n",
                                "type unzip || yum install unzip -y\n",
                                "\n",
                                "# Install aws bootstrap\n",
                                "echo \"Installing wget\"\n",
                                "yum install wget -y\n",
                                "\n",
                                "echo \"Fetching aws bootstrap\"\n",
                                "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "\n",
                                "echo \"Unpackaging bootstrap\"\n",
                                "tar xfv aws-cfn-bootstrap-latest.tar.gz && rm -f aws-cfn-bootstrap-latest.tar.gz\n",
                                "\n",
                                "cd aws-cfn-bootstrap-*\n",
                                "\n",
                                "echo \"Installing bootstrap\"\n",
                                "python setup.py install\n",
                                "\n",
                                "\n",
                                "if ! type aws >> /dev/null ; then\n",
                                "  echo \"There is no AWS Cli packaged installed. Let's install it.\"\n",
                                "  wget --quiet https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -O /tmp/awscli-bundle.zip && unzip -qo /tmp/awscli-bundle.zip -d /tmp/ && /tmp/awscli-bundle/install -i /usr/local/aws -b /usr/bin/aws\n",
                                "fi\n",
                                "\n",
                                "for i in /srv/salt /srv/pillar; do\n",
                                "  [[ -d $i ]] || mkdir -p $i\n",
                                "done\n",
                                "\n",
                                "mountpoint -q /srv/salt || mount -B /opt/DevOps/salt /srv/salt\n",
                                "mountpoint -q /srv/pillar || mount -B /opt/DevOps/pillar /srv/pillar\n",
                                "\n",
                                "rds_endpoint=$(aws rds describe-db-instances --db-instance-identifier DB-WordPress --region sa-east-1 | grep \"Address\" | cut -d '\"' -f 4)\n",
                                "\n",
                                "sed -i \"s/rds_endpoint:/rds_endpoint: $rds_endpoint/\" /srv/pillar/wordpress_rds.sls\n",
                                "\n",
                                "echo \"Running salt-call state.sls basic_install\"\n",
                                "if ! salt-call --local state.sls masterless.wordpress; then\n",
                                "  send_signal 1\n",
                                "  exit 1\n",
                                "fi\n",
                                "\n",
                                "# Success\n",
                                "echo \"SUCCESS\"\n",
                                "send_signal 0\n",
                                "\n",
                                "/bin/cfn-signal -e 0 -r complete -s true ",
                                "\"",
                                {
                                    "Ref": "WaitHandle"
                                },
                                "\""
                            ]
                        ]
                    }
                },
                "IamInstanceProfile": {
                    "Ref": "RootInstanceProfile"
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": true,
                        "GroupSet": [
                            {
                                "Ref": "EC2SecurityGroup"
                            }
                        ],
                        "DeviceIndex": "0",
                        "DeleteOnTermination": true,
                        "SubnetId": {
                            "Ref": "SubnetZone1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WebServer-WordPress"
                    }
                ]
            }
        },
        "WaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {}
        },
        "ELB": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "HealthCheck": {
                    "Target": "HTTP:80/",
                    "HealthyThreshold": "3",
                    "UnhealthyThreshold": "5",
                    "Interval": "30",
                    "Timeout": "5"
                },
                "Instances": [
                    {
                        "Ref": "WebInstance"
                    }
                ],
                "LoadBalancerName": "ELB-WordPress",
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "EC2SecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "SubnetZone1"
                    },
                    {
                        "Ref": "SubnetZone2"
                    }
                ]
            }
        },
        "WordpressAutoScalingServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LaunchConfigurationName": {
                    "Ref": "WordpressLaunchConfig"
                },
                "MinSize": "0",
                "MaxSize": "5",
                "Cooldown": "900",
                "DesiredCapacity": "0",
                "TerminationPolicies": [
                    "OldestLaunchConfiguration",
                    "ClosestToNextInstanceHour"
                ],
                "LoadBalancerNames": [
                    {
                        "Ref": "ELB"
                    }
                ],
                "HealthCheckGracePeriod": "900",
                "HealthCheckType": "ELB",
                "VPCZoneIdentifier": [
                    {
                        "Ref": "SubnetZone1"
                    },
                    {
                        "Ref": "SubnetZone2"
                    }
                ],
                "AvailabilityZones": [
                    "sa-east-1a",
                    "sa-east-1b"
                ]
            }
        },
        "WordpressLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "KeyName": "wordpress",
                "ImageId": "ami-bf9520a2",
                "SecurityGroups": [
                    {
                        "Ref": "EC2SecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "RootInstanceProfile"
                },
                "InstanceType": "t2.micro",
                "AssociatePublicIpAddress": "true",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "\n",
                                "type git || yum install -y git\n",
                                "\n",
                                "git clone https://github.com/rapha-lima/DevOps.git /opt/DevOps\n",
                                "\n",
                                "type salt-call || curl -sSL https://bootstrap.saltstack.com | sh\n",
                                "type unzip || yum install unzip -y\n",
                                "\n",
                                "# Install aws bootstrap\n",
                                "echo \"Installing wget\"\n",
                                "yum install wget -y\n",
                                "\n",
                                "echo \"Fetching aws bootstrap\"\n",
                                "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                                "\n",
                                "echo \"Unpackaging bootstrap\"\n",
                                "tar xfv aws-cfn-bootstrap-latest.tar.gz && rm -f aws-cfn-bootstrap-latest.tar.gz\n",
                                "\n",
                                "cd aws-cfn-bootstrap-*\n",
                                "\n",
                                "echo \"Installing bootstrap\"\n",
                                "python setup.py install\n",
                                "\n",
                                "\n",
                                "if ! type aws >> /dev/null ; then\n",
                                "  echo \"There is no AWS Cli packaged installed. Let's install it.\"\n",
                                "  wget --quiet https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -O /tmp/awscli-bundle.zip && unzip -qo /tmp/awscli-bundle.zip -d /tmp/ && /tmp/awscli-bundle/install -i /usr/local/aws -b /usr/bin/aws\n",
                                "fi\n",
                                "\n",
                                "for i in /srv/salt /srv/pillar; do\n",
                                "  [[ -d $i ]] || mkdir -p $i\n",
                                "done\n",
                                "\n",
                                "mountpoint -q /srv/salt || mount -B /opt/DevOps/salt /srv/salt\n",
                                "mountpoint -q /srv/pillar || mount -B /opt/DevOps/pillar /srv/pillar\n",
                                "\n",
                                "rds_endpoint=$(aws rds describe-db-instances --db-instance-identifier DB-WordPress --region sa-east-1 | grep \"Address\" | cut -d '\"' -f 4)\n",
                                "\n",
                                "sed -i \"s/rds_endpoint:/rds_endpoint: $rds_endpoint/\" /srv/pillar/wordpress_rds.sls\n",
                                "\n",
                                "echo \"Running salt-call state.sls basic_install\"\n",
                                "if ! salt-call --local state.sls masterless.wordpress; then\n",
                                "  exit 1\n",
                                "fi\n",
                                "\n",
                                "# Success\n",
                                "echo \"SUCCESS\"\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WordpressAutoScalingServerGroup"
                },
                "Cooldown": "1",
                "ScalingAdjustment": "1"
            }
        },
        "ScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WordpressAutoScalingServerGroup"
                },
                "Cooldown": "1",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "50",
                "AlarmDescription": "Alarm if CPU too high",
                "Period": "60",
                "Dimensions": [
                    {
                        "Name": "WordpressAutoScalingServerGroup",
                        "Value": {
                            "Ref": "WordpressAutoScalingServerGroup"
                        }
                    }
                ],
                "AlarmActions": [
                    {
                        "Ref": "ScaleUpPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "ComparisonOperator": "GreaterThanThreshold",
                "MetricName": "CPUUtilization"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "Threshold": "10",
                "AlarmDescription": "Alarm if CPU is less than 10",
                "Period": "60",
                "Dimensions": [
                    {
                        "Name": "WordpressAutoScalingServerGroup",
                        "Value": {
                            "Ref": "WordpressAutoScalingServerGroup"
                        }
                    }
                ],
                "AlarmActions": [
                    {
                        "Ref": "ScaleDownPolicy"
                    }
                ],
                "Namespace": "AWS/EC2",
                "ComparisonOperator": "LessThanThreshold",
                "MetricName": "CPUUtilization"
            }
        }
    }
}
